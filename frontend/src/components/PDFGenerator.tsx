'use client';

import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';
import { RefinementResult } from '../types/types';

// Create styles
const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    padding: 30,
    fontSize: 12,
    lineHeight: 1.4,
  },
  header: {
    marginBottom: 30,
    textAlign: 'center',
    borderBottom: '2 solid #6366f1',
    paddingBottom: 20,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 16,
    color: '#6b7280',
    marginBottom: 5,
  },
  section: {
    marginBottom: 25,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#374151',
    marginBottom: 10,
    backgroundColor: '#f3f4f6',
    padding: 8,
    borderRadius: 4,
  },
  sectionContent: {
    fontSize: 12,
    color: '#374151',
    marginBottom: 15,
    textAlign: 'justify',
  },
  numberedSection: {
    flexDirection: 'row',
    marginBottom: 15,
  },
  number: {
    width: 30,
    fontSize: 14,
    fontWeight: 'bold',
    color: '#6366f1',
  },
  content: {
    flex: 1,
  },
  debateLog: {
    marginTop: 20,
    borderTop: '1 solid #e5e7eb',
    paddingTop: 20,
  },
  debateEntry: {
    marginBottom: 10,
    padding: 10,
    backgroundColor: '#f9fafb',
    borderRadius: 4,
  },
  agentName: {
    fontWeight: 'bold',
    color: '#6366f1',
    marginBottom: 5,
  },
  response: {
    color: '#374151',
    fontStyle: 'italic',
  },
  iterations: {
    marginTop: 20,
    borderTop: '1 solid #e5e7eb',
    paddingTop: 20,
  },
  iteration: {
    marginBottom: 15,
    padding: 10,
    backgroundColor: '#f0f9ff',
    borderRadius: 4,
    border: '1 solid #bae6fd',
  },
  iterationTitle: {
    fontWeight: 'bold',
    color: '#0369a1',
    marginBottom: 5,
  },
  feedback: {
    color: '#374151',
    marginBottom: 8,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    color: '#9ca3af',
    fontSize: 10,
    borderTop: '1 solid #e5e7eb',
    paddingTop: 10,
  },
});

interface PDFGeneratorProps {
  result: RefinementResult;
  iterations: Array<{
    id: string;
    feedback: string;
    result: RefinementResult;
    timestamp: Date;
  }>;
}

const PDFGenerator = ({ result, iterations }: PDFGeneratorProps) => (
  <Document>
    <Page size="A4" style={styles.page}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>Product Requirements Document (PRD)</Text>
        <Text style={styles.subtitle}>Generated by Focal AI</Text>
        <Text style={styles.subtitle}>
          {new Date().toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })}
        </Text>
      </View>

      {/* PRD Sections */}
      {result.sections && (
        <>
          {/* Overview */}
          {result.sections.overview && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>1.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>Overview</Text>
                  <Text style={styles.sectionContent}>{result.sections.overview}</Text>
                </View>
              </View>
            </View>
          )}

          {/* Problem Statement */}
          {result.sections.problem_statement && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>2.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>Problem Statement</Text>
                  <Text style={styles.sectionContent}>{result.sections.problem_statement}</Text>
                </View>
              </View>
            </View>
          )}

          {/* Debate Summary */}
          {result.sections.debate_summary && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>3.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>Debate Summary (Agent Perspectives)</Text>
                  <Text style={styles.sectionContent}>{result.sections.debate_summary}</Text>
                </View>
              </View>
            </View>
          )}

          {/* Objectives */}
          {result.sections.objectives && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>4.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>Objectives</Text>
                  <Text style={styles.sectionContent}>{result.sections.objectives}</Text>
                </View>
              </View>
            </View>
          )}

          {/* Scope */}
          {result.sections.scope && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>5.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>Scope</Text>
                  <Text style={styles.sectionContent}>{result.sections.scope}</Text>
                </View>
              </View>
            </View>
          )}

          {/* Requirements */}
          {result.sections.requirements && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>6.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>Requirements</Text>
                  <Text style={styles.sectionContent}>{result.sections.requirements}</Text>
                </View>
              </View>
            </View>
          )}

          {/* User Stories */}
          {result.sections.user_stories && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>7.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>User Stories</Text>
                  <Text style={styles.sectionContent}>{result.sections.user_stories}</Text>
                </View>
              </View>
            </View>
          )}

          {/* Trade-offs & Decisions */}
          {result.sections.trade_offs_decisions && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>8.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>Trade-offs & Decisions</Text>
                  <Text style={styles.sectionContent}>{result.sections.trade_offs_decisions}</Text>
                </View>
              </View>
            </View>
          )}

          {/* Next Steps */}
          {result.sections.next_steps && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>9.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>Next Steps</Text>
                  <Text style={styles.sectionContent}>{result.sections.next_steps}</Text>
                </View>
              </View>
            </View>
          )}

          {/* Success Metrics */}
          {result.sections.success_metrics && (
            <View style={styles.section}>
              <View style={styles.numberedSection}>
                <Text style={styles.number}>10.</Text>
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>Success Metrics</Text>
                  <Text style={styles.sectionContent}>{result.sections.success_metrics}</Text>
                </View>
              </View>
            </View>
          )}
        </>
      )}

      {/* Fallback content if sections parsing failed */}
      {(!result.sections && result.prd_content) && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Product Requirements</Text>
          <Text style={styles.sectionContent}>{result.prd_content}</Text>
        </View>
      )}

      {/* Debate Log */}
      {result.debate_log && result.debate_log.length > 0 && (
        <View style={styles.debateLog}>
          <Text style={styles.sectionTitle}>AI Stakeholder Debate Log</Text>
          {result.debate_log.map((entry, index) => (
            <View key={index} style={styles.debateEntry}>
              <Text style={styles.agentName}>{entry.agent}</Text>
              <Text style={styles.response}>{entry.response}</Text>
            </View>
          ))}
        </View>
      )}

      {/* Feedback Iterations */}
      {iterations && iterations.length > 0 && (
        <View style={styles.iterations}>
          <Text style={styles.sectionTitle}>Feedback Iterations</Text>
          {iterations.map((iteration, index) => (
            <View key={iteration.id} style={styles.iteration}>
              <Text style={styles.iterationTitle}>
                Iteration {index + 1} - {new Date(iteration.timestamp).toLocaleDateString()}
              </Text>
              <Text style={styles.feedback}>
                <Text style={{ fontWeight: 'bold' }}>Feedback:</Text> {iteration.feedback}
              </Text>
              {iteration.result.sections && (
                <Text style={styles.sectionContent}>
                  <Text style={{ fontWeight: 'bold' }}>Refined Requirements:</Text> {iteration.result.sections.overview || 'Updated requirements based on feedback.'}
                </Text>
              )}
            </View>
          ))}
        </View>
      )}

      {/* Footer */}
      <View style={styles.footer}>
        <Text>Generated by Focal AI - AI-powered requirement refinement</Text>
        <Text>Page 1</Text>
      </View>
    </Page>
  </Document>
);

export default PDFGenerator;
